function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React from 'react';
import { NativeModules, NativeEventEmitter, requireNativeComponent, Platform, StyleSheet } from 'react-native';
import { MFCountry, MFEnvironment, MFLanguage, MFCurrencyISO, MFMobileCountryCodeISO, MFNotificationOption, MFKeyType, MFFontWeight, MFFontFamily, MFRecurringType, MFTokenType } from './MFEnums';
import { MFSendPaymentRequest, MFSendPaymentResponse, MFInitiatePaymentRequest, MFInitiatePaymentResponse, MFGetPaymentStatusRequest, MFGetPaymentStatusResponse, MFExecutePaymentRequest, MFExecutePaymentResponse, MFDirectPaymentRequest, MFDirectPaymentResponse, MFInitiateSessionRequest, MFInitiateSessionResponse, MFCardViewStyle, MFApplePayStyle, MFPaymentMethod, MFCustomerAddress, MFInvoiceItem, MFSupplier, MFRecurringModel, MFProcessingDetails, MFPaymentWithTokenRequest, MFInvoiceTransaction, MFSupplierItem, MFCardRequest, DirectPaymentResponse, CardInfo, MFError, MFSubmitCardViewResponse, MFCardViewInput, MFCardViewPlaceHolder, MFCardViewLabel, MFCardViewText, MFCardViewError, MFBoxShadow, MFApplePayToken, MFApplePayRequest, MFGooglePayRequest } from './MFModels';
import { LINKING_ERROR, modelParser, PLATFORM_ERROR } from './MFUtils';

//#region SDK

const _proxy = new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
const MFModule = NativeModules.MFModule ? NativeModules.MFModule : _proxy;
const MFEventEmitter = new NativeEventEmitter(MFModule);
class MyFatoorahReactNative {
  async init(apiKey, country, environment) {
    await MFModule.init(apiKey, country, environment);
  }
  async setUpActionBar(toolBarTitle, toolBarTitleColor, toolBarBackgroundColor, isShowToolBar) {
    await MFModule.setUpActionBar(toolBarTitle, toolBarTitleColor, toolBarBackgroundColor, isShowToolBar);
  }
  async initiatePayment(initiatePaymentRequest, lang) {
    var jsonResponse = await MFModule.InitiatePayment(initiatePaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async sendPayment(sendPaymentRequest, lang) {
    var jsonResponse = await MFModule.SendPayment(sendPaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async getPaymentStatus(getPaymentStatusRequest, lang) {
    var jsonResponse = await MFModule.GetPaymentStatus(getPaymentStatusRequest, lang);
    return modelParser(jsonResponse);
  }
  async executePayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePayment(executePaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async executePaymentWithSavedToken(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePaymentWithSavedToken(executePaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async executeDirectPayment(directPaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecuteDirectPayment(directPaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async cancelToken(tokenId, lang) {
    var response = await MFModule.cancelToken(tokenId, lang);
    return response;
  }
  async cancelRecurringPayment(recurringId, lang) {
    var response = await MFModule.cancelRecurringPayment(recurringId, lang);
    return response;
  }
  async initiateSession(initiateSessionRequest) {
    var jsonResponse = await MFModule.InitiateSession(initiateSessionRequest);
    return modelParser(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  async getApplePayToken(request) {
    var jsonResponse = await MFModule.getApplePayToken(request);
    return modelParser(jsonResponse);
  }
  async applePayNativePayment(request, executePaymentRequest, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.applePayNativePayment(request, executePaymentRequest);
    return modelParser(jsonResponse);
  }
}
const MFSDK = new MyFatoorahReactNative();
//#endregion

//#region CardView

const CardView = requireNativeComponent('MFCardView');
class MFCardPaymentView extends React.Component {
  constructor(props) {
    super(props);
  }
  async validate(currency) {
    if (currency === undefined) currency = '';
    var response = await MFModule.Validate(currency);
    return response;
  }
  async submit(currency) {
    if (currency === undefined) currency = '';
    var response = await MFModule.Validate(currency);
    return response;
  }
  async load(initiateSessionResponse, onCardBinChanged) {
    setTimeout(() => {}, 100);
    this.AddOnCardBinChangedListener(onCardBinChanged);
    var jsonResponse = await MFModule.LoadCardView(initiateSessionResponse);
    return jsonResponse;
  }
  AddOnCardBinChangedListener(listener) {
    let onCardBinChangedEventName = 'onCardBinChanged';
    MFEventEmitter.removeAllListeners(onCardBinChangedEventName);
    MFEventEmitter.addListener(onCardBinChangedEventName, listener);
  }
  async pay(executePaymentRequest, lang, onInvoiceCreated, currency) {
    if (currency === undefined) currency = '';
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.Pay(executePaymentRequest, lang, currency);
    return modelParser(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  render() {
    return /*#__PURE__*/React.createElement(CardView, this.props);
  }
}

//#endregion

//#region GooglePay
const GooglePayButton = requireNativeComponent('MFGooglePayButton');
const {
  GooglePayButtonConstants
} = NativeModules;
const styles = StyleSheet.create({
  googlePay: {
    width: '90%',
    height: 70,
    margin: 10
  }
});
class MFGooglePayButton extends React.Component {
  constructor(props) {
    super(props);
  }
  async setupGooglePayHelper(sessionId, googlePayRequest, onInvoiceCreated) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    var jsonResponse = await MFModule.SetupGooglePayHelper(sessionId, googlePayRequest);
    return modelParser(jsonResponse);
  }
  async setupGooglePayTokenHelper(googlePayRequest) {
    var jsonResponse = await MFModule.SetupGooglePayTokenHelper(googlePayRequest);
    return modelParser(jsonResponse);
  }
  async setupWithAutoExecute(sessionId, googlePayRequest, onInvoiceCreated, onExecutePaymentSuccess, onError) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    this.registerListener(MFConstants.GPayExecutePaymentSuccessEventName, onExecutePaymentSuccess);
    this.registerListener(MFConstants.GPayErrorEventName, onError);
    const jsonResponse = await MFModule.SetupGooglePayHelperAuto(sessionId, googlePayRequest);
    return modelParser(jsonResponse);
  }
  async setupWithManualExecute(sessionId, googlePayRequest, onSessionUpdated, onError) {
    this.registerListener(MFConstants.GPaySessionUpdatedEventName, onSessionUpdated);
    this.registerListener(MFConstants.GPayErrorEventName, onError);
    const jsonResponse = await MFModule.SetupGooglePayHelperManual(sessionId, googlePayRequest);
    return modelParser(jsonResponse);
  }
  async executePayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePaymentWithGooglePay(executePaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  registerListener(eventName, listener) {
    MFEventEmitter.removeAllListeners(eventName);
    if (listener !== undefined && listener instanceof Function) {
      MFEventEmitter.addListener(eventName, listener);
    }
  }
  render() {
    return /*#__PURE__*/React.createElement(GooglePayButton, _extends({}, this.props, {
      style: this.props.style ?? styles.googlePay
    }));
  }
}
//#endregion

//#region ApplePay

const ApplePay = requireNativeComponent('MFApplePay');
class MFApplePayButtonView extends React.Component {
  constructor(props) {
    super(props);
    if (Platform.OS === 'android') {
      throw new Error(PLATFORM_ERROR);
    }
  }
  async applePayPayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ApplePayPayment(executePaymentRequest, lang);
    return modelParser(jsonResponse);
  }
  async applePayDisplay(executePaymentRequest, lang) {
    console.warn('The applePayDisplay is deprecated and will be removed in the future. Please use the displayApplePayButton instead.');
    var response = await MFModule.ApplePayDisplay(executePaymentRequest, lang);
    return response;
  }
  async displayApplePayButton(session, executePaymentRequest, lang) {
    var response = await MFModule.DisplayApplePayButton(session, executePaymentRequest, lang);
    return modelParser(response);
  }
  async applePayExecutePayment(executePaymentRequest) {
    var jsonResponse = await MFModule.ApplePayExecutePayment(executePaymentRequest);
    return modelParser(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  render() {
    return /*#__PURE__*/React.createElement(ApplePay, this.props);
  }
}

//#endregion

//#region ApplePay V3

class MFApplePayClass {
  async loadApplePay(session, request, lang, merchantName = undefined, onApplePayLoaded) {
    if (onApplePayLoaded instanceof Function) {
      this.AddOnApplePayLoadedListener(onApplePayLoaded);
    }
    var jsonResponse = await MFModule.LoadApplePay(session, request, lang, merchantName);
    return modelParser(jsonResponse);
  }
  async openApplePaymentSheet() {
    var jsonResponse = await MFModule.OpenApplePaymentSheet();
    return modelParser(jsonResponse);
  }
  async completeApplePayment(executePaymentRequest = undefined, onInvoiceCreated) {
    if (onInvoiceCreated instanceof Function) {
      this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    }
    var jsonResponse = await MFModule.CompleteApplePayment(executePaymentRequest);
    return modelParser(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  AddOnApplePayLoadedListener(listener) {
    let onApplePayLoadedListener = 'applePayLoaded';
    MFEventEmitter.removeAllListeners(onApplePayLoadedListener);
    MFEventEmitter.addListener(onApplePayLoadedListener, listener);
  }
}
const MFApplePay = new MFApplePayClass();
//#endregion

const MFConstants = {
  InvoiceCreatedEventName: 'onInvoiceCreated',
  CardBinChangedEventName: 'onCardBinChanged',
  GPaySessionUpdatedEventName: 'OnGPaySessionUpdated',
  GPayExecutePaymentSuccessEventName: 'OnGPayExecutePaymentSuccess',
  GPayErrorEventName: 'OnGPayError'
};
export {
//#region Classes
MFSDK, MFCardPaymentView, MFGooglePayButton, MFApplePayButtonView, MFApplePay,
//#endregion

//#region InitiatePayment
MFInitiatePaymentRequest, MFInitiatePaymentResponse, MFPaymentMethod, MFTokenType,
//#endregion

//#region SendPayment
MFSendPaymentRequest, MFCustomerAddress, MFInvoiceItem, MFSupplier, MFSendPaymentResponse,
//#endregion

//#region ExecutePayment
MFExecutePaymentRequest, MFExecutePaymentResponse, MFRecurringModel, MFProcessingDetails, MFPaymentWithTokenRequest,
//#endregion

//#region GetPaymentStatus
MFGetPaymentStatusRequest, MFGetPaymentStatusResponse, MFInvoiceTransaction, MFSupplierItem,
//#endregion

//#region InitiateSession
MFInitiateSessionRequest, MFInitiateSessionResponse,
//#endregion

//#region DirectPayment
MFDirectPaymentRequest, MFCardRequest, MFDirectPaymentResponse, DirectPaymentResponse, CardInfo,
//#endregion

//#region Error
MFError,
//#endregion

//#region Enums
MFEnvironment, MFLanguage, MFCurrencyISO, MFCountry, MFMobileCountryCodeISO, MFNotificationOption, MFKeyType, MFFontWeight, MFFontFamily, MFRecurringType,
//#endregion

//#region PaymentCardViewConfig
MFSubmitCardViewResponse, MFCardViewStyle, MFCardViewInput, MFCardViewPlaceHolder, MFCardViewLabel, MFCardViewText, MFCardViewError, MFBoxShadow, MFApplePayStyle,
//#endregion

//#region Apple Pay Native
MFApplePayToken, MFApplePayRequest,
//#endregion

//#region GooglePay
MFGooglePayRequest, GooglePayButtonConstants
//#endregion
};
//# sourceMappingURL=index.js.map