import { MFFontFamily, MFFontWeight, MFLanguage } from './MFEnums';
import { processColor } from 'react-native';

//#region InitiatePayment
export class MFInitiatePaymentRequest {
  constructor(invoiceAmount, currencyIso) {
    this.InvoiceAmount = invoiceAmount;
    this.CurrencyIso = currencyIso;
  }
}
export class MFInitiatePaymentResponse {
  PaymentMethods = null;
}
export class MFPaymentMethod {
  PaymentMethodId = null;
  PaymentMethodAr = null;
  PaymentMethodEn = null;
  PaymentMethodCode = null;
  IsDirectPayment = null;
  ServiceCharge = null;
  TotalAmount = null;
  CurrencyIso = null;
  ImageUrl = null;
  IsEmbeddedSupported = null;
  PaymentCurrencyIso = null;
}
//#endregion

//#region SendPayment
export class MFSendPaymentRequest {
  constructor(invoiceValue, notificationOption, customerName) {
    this.InvoiceValue = invoiceValue;
    this.CustomerName = customerName;
    this.NotificationOption = notificationOption;
  }
  MobileCountryCode = null;
  CustomerMobile = null;
  CustomerEmail = null;
  DisplayCurrencyIso = null;
  Language = MFLanguage.ENGLISH;
  CustomerReference = null;
  CustomerCivilId = null;
  UserDefinedField = null;
  CustomerAddress = null;
  ExpiryDate = null;
  InvoiceItems = null;
  WebhookUrl = null;
}
export class MFCustomerAddress {
  constructor(block, street, houseBuildingNo, address, addressInstructions) {
    this.Block = block;
    this.Street = street;
    this.HouseBuildingNo = houseBuildingNo;
    this.Address = address;
    this.AddressInstructions = addressInstructions;
  }
  Block = null;
  Street = null;
  HouseBuildingNo = null;
  Address = null;
  AddressInstructions = null;
}
export class MFInvoiceItem {
  constructor(itemName, quantity, unitPrice) {
    this.ItemName = itemName;
    this.Quantity = quantity;
    this.UnitPrice = unitPrice;
  }
}
export class MFSupplier {
  constructor(supplierCode, invoiceShare, proposedShare = null) {
    this.SupplierCode = supplierCode;
    this.ProposedShare = proposedShare;
    this.InvoiceShare = invoiceShare;
  }
  SupplierCode = null;
  ProposedShare = null;
  InvoiceShare = null;
}
export class MFSendPaymentResponse {
  InvoiceId = null;
  InvoiceURL = null;
  CustomerReference = null;
  UserDefinedField = null;
}
//#endregion

//#region ExecutePayment
export class MFExecutePaymentRequest {
  constructor(invoiceValue) {
    this.InvoiceValue = invoiceValue;
  }
  PaymentMethodId = null;
  SessionId = null;
  CustomerName = null;
  DisplayCurrencyIso = null;
  MobileCountryCode = null;
  CustomerMobile = null;
  CustomerEmail = null;
  Language = null;
  CustomerReference = null;
  CustomerCivilId = null;
  UserDefinedField = null;
  CustomerAddress = null;
  ExpiryDate = null;
  InvoiceItems = null;
  Suppliers = null;
  RecurringModel = null;
  ProcessingDetails = null;
  WebhookUrl = null;
}
export class MFExecutePaymentResponse {
  InvoiceId = null;
  IsDirectPayment = null;
  PaymentURL = null;
  CustomerReference = null;
  UserDefinedField = null;
  RecurringId = null;
}
export class MFRecurringModel {
  constructor(mFRecurringType, iteration = null) {
    this.Iteration = iteration;
    this.RecurringType = mFRecurringType;
  }
  RecurringType = null;
  IntervalDays = null;
  Iteration = null;
}
export class MFProcessingDetails {
  constructor(autoCapture = null, bypass3DS = null) {
    this.AutoCapture = autoCapture;
    this.Bypass3DS = bypass3DS;
  }
  AutoCapture = null;
  Bypass3DS = null;
}
export class MFPaymentWithTokenRequest {
  constructor(executePaymentRequest, token, securityCode = null) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.SecurityCode = securityCode;
  }
  SecurityCode = null;
}
//#endregion

//#region GetPaymentStatus
// MFKeyType
export class MFGetPaymentStatusRequest {
  constructor(key, keyType) {
    this.Key = key;
    this.KeyType = keyType;
  }
  // constructor(invoiceId: String = '', paymentId: String = '') {
  //   if (invoiceId === '') {
  //     this.key = paymentId;
  //     this.keyType = MFKeyType.PAYMENTID;
  //   } else if (paymentId === '') {
  //     this.key = invoiceId;
  //     this.keyType = MFKeyType.INVOICEID;
  //   }
  // }
  Key = null;
  KeyType = null;
}
export class MFGetPaymentStatusResponse {
  InvoiceId = null;
  InvoiceStatus = null;
  InvoiceReference = null;
  CustomerReference = null;
  CreatedDate = null;
  ExpiryDate = null;
  InvoiceValue = null;
  Comments = null;
  CustomerName = null;
  CustomerMobile = null;
  CustomerEmail = null;
  UserDefinedField = null;
  InvoiceDisplayValue = null;
  InvoiceItems = null;
  InvoiceTransactions = null;
  Suppliers = null;
  RecurringId = null;
}
export class MFInvoiceTransaction {
  TransactionDate = null;
  PaymentGateway = null;
  ReferenceId = null;
  TrackId = null;
  TransactionId = null;
  PaymentId = null;
  AuthorizationId = null;
  TransactionStatus = null;
  TransationValue = null;
  CustomerServiceCharge = null;
  DueValue = null;
  PaidCurrency = null;
  PaidCurrencyValue = null;
  Currency = null;
  Error = null;
  CardNumber = null;
  ErrorCode = null;
}
export class MFSupplierItem {
  SupplierCode = null;
  SupplierName = null;
  InvoiceShare = null;
  ProposedShare = null;
  DepositShare = null;
}
//#endregion

//#region InitiateSession
export class MFInitiateSessionRequest {
  constructor(customerIdentifier) {
    this.CustomerIdentifier = customerIdentifier;
  }
}
export class MFInitiateSessionResponse {
  SessionId = null;
  CountryCode = null;
  CustomerTokens = [];
}
export class CustomerTokens {
  Token = null;
  CardNumber = null;
  CardBrand = null;
  Is3DSVerified = false;
}
export class MFCallbackResponse {
  CardBrand = null;
}
//#endregion

//#region DirectPayment
export class MFDirectPaymentRequest {
  constructor(executePaymentRequest, token, card) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.Card = card;
  }
  Card = null;
  Token = null;
  SaveToken = null;
  Bypass3DS = null;
}
export class MFCardRequest {
  constructor(Number, ExpiryMonth, ExpiryYear, SecurityCode, CardHolderName) {
    this.Number = Number;
    this.ExpiryMonth = ExpiryMonth;
    this.ExpiryYear = ExpiryYear;
    this.SecurityCode = SecurityCode;
    this.CardHolderName = CardHolderName;
  }
}
export class MFDirectPaymentResponse {
  MfPaymentStatusResponse = new MFGetPaymentStatusResponse();
  CardInfoResponse = new DirectPaymentResponse();
}
export class DirectPaymentResponse {
  Status = null;
  ErrorMessage = null;
  PaymentId = null;
  Token = null;
  RecurringId = null;
  CardInfo = null;
  PaymentURL = null;
}
export class CardInfo {
  Number = null;
  ExpiryMonth = null;
  ExpiryYear = null;
  Brand = null;
  Issuer = null;
}
//#endregion

//#region Error
export class MFError {
  code = null;
  message = null;
}
//#endregion

//#region PaymentCardViewConfig

export class MFSubmitCardViewResponse {
  CardBrand = null;
  SessionId = null;
}
export class MFCardViewStyle {
  constructor(hideCardIcons = false, direction = 'ltr', cardHeight = 230, input = new MFCardViewInput(), label = new MFCardViewLabel(), error = new MFCardViewError()) {
    this.HideCardIcons = hideCardIcons;
    this.Direction = direction;
    this.CardHeight = cardHeight;
    this.Input = input;
    this.Label = label;
    this.Error = error;
  }
}
export class MFCardViewInput {
  constructor(color = processColor('black'), fontSize = 13, fontFamily = MFFontFamily.SansSerif, inputHeight = 32, inputMargin = 0, borderColor = processColor('#c7c7c7'), borderWidth = 1, borderRadius = 8, boxShadow = new MFBoxShadow(0, 0, 0, 0, processColor('white')), placeHolder = new MFCardViewPlaceHolder()) {
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.InputHeight = inputHeight;
    this.InputMargin = inputMargin;
    this.BorderColor = borderColor;
    this.BorderWidth = borderWidth;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
    this.PlaceHolder = placeHolder;
  }
}
export class MFCardViewPlaceHolder {
  constructor(holderName = 'Name On Card', cardNumber = 'Number', expiryDate = 'MM / YY', securityCode = 'CVV') {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
}
export class MFCardViewLabel {
  constructor(display = false, color = processColor('black'), fontSize = 13, fontFamily = MFFontFamily.SansSerif, fontWeight = MFFontWeight.Normal, text = new MFCardViewText()) {
    this.Display = display;
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.FontWeight = fontWeight;
    this.Text = text;
  }
}
export class MFCardViewText {
  constructor(holderName = 'Card Holder Name', cardNumber = 'Card Number', expiryDate = 'Expiry Date', securityCode = 'Security Code') {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
}
export class MFCardViewError {
  constructor(borderColor = processColor('red'), borderRadius = 8, boxShadow = new MFBoxShadow()) {
    this.BorderColor = borderColor;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
  }
}
export class MFBoxShadow {
  constructor(hOffset = 0, vOffset = 0, blur = 0, spread = 0, color = processColor('white')) {
    this.HOffset = hOffset;
    this.VOffset = vOffset;
    this.Blur = blur;
    this.Spread = spread;
    this.Color = color;
  }
}
export class MFApplePayStyle {
  constructor(height, borderRadius, buttonText, hideLoadingIndicator) {
    this.Height = height;
    this.BorderRadius = borderRadius;
    this.ButtonText = buttonText;
    this.HideLoadingIndicator = hideLoadingIndicator;
  }
}
//#endregion

//#region Apple Pay Native
export class MFApplePayRequest {
  constructor(merchantId, companyName, amount, currencyCode) {
    this.MerchantId = merchantId;
    this.CompanyName = companyName;
    this.Amount = amount;
    this.CurrencyCode = currencyCode;
  }
  CustomerIdentifier = null;
  SupportedCountries = null;
  SupportedNetworks = null;
}
export class MFApplePayToken {}
//#endregion

//#region GooglePayButton
export class MFGooglePayRequest {
  constructor(totalPrice, merchantId, merchantName, countryCode, currencyIso) {
    this.TotalPrice = totalPrice;
    this.MerchantId = merchantId;
    this.MerchantName = merchantName;
    this.CountryCode = countryCode;
    this.CurrencyIso = currencyIso;
  }
}
export class MFGooglePayButtonStyle {}
//#endregion
//# sourceMappingURL=MFModels.js.map