import type { Double } from 'react-native/Libraries/Types/CodegenTypes';
import { MFCurrencyISO, MFFontFamily, MFFontWeight, MFLanguage, MFRecurringType } from './MFEnums';
import { ProcessedColorValue } from 'react-native';
export declare class MFInitiatePaymentRequest {
    constructor(invoiceAmount: Double, currencyIso: MFCurrencyISO);
    InvoiceAmount: Double;
    CurrencyIso: MFCurrencyISO;
}
export declare class MFInitiatePaymentResponse {
    PaymentMethods: MFPaymentMethod[] | null;
}
export declare class MFPaymentMethod {
    PaymentMethodId: number | null;
    PaymentMethodAr: String | null;
    PaymentMethodEn: String | null;
    PaymentMethodCode: String | null;
    IsDirectPayment: Boolean | null;
    ServiceCharge: Double | null;
    TotalAmount: Double | null;
    CurrencyIso: String | null;
    ImageUrl: string | null;
    IsEmbeddedSupported: Boolean | null;
    PaymentCurrencyIso: String | null;
}
export declare class MFSendPaymentRequest {
    constructor(invoiceValue: number, notificationOption: string, customerName: string);
    InvoiceValue: number;
    NotificationOption: string;
    CustomerName: string;
    MobileCountryCode: String | null;
    CustomerMobile: String | null;
    CustomerEmail: String | null;
    DisplayCurrencyIso: String | null;
    Language: MFLanguage;
    CustomerReference: String | null;
    CustomerCivilId: String | null;
    UserDefinedField: String | null;
    CustomerAddress: MFCustomerAddress | null;
    ExpiryDate: String | null;
    InvoiceItems: MFInvoiceItem[] | null;
    WebhookUrl: String | null;
}
export declare class MFCustomerAddress {
    constructor(block: String | null, street: String | null, houseBuildingNo: String | null, address: String | null, addressInstructions: String | null);
    Block: String | null;
    Street: String | null;
    HouseBuildingNo: String | null;
    Address: String | null;
    AddressInstructions: String | null;
}
export declare class MFInvoiceItem {
    constructor(itemName: String, quantity: number, unitPrice: Double);
    ItemName: String;
    Quantity: number;
    UnitPrice: Double;
}
export declare class MFSupplier {
    constructor(supplierCode: number | null, invoiceShare: Double | null, proposedShare?: Double | null);
    SupplierCode: number | null;
    ProposedShare: Double | null;
    InvoiceShare: Double | null;
}
export declare class MFSendPaymentResponse {
    InvoiceId: number | null;
    InvoiceURL: String | null;
    CustomerReference: String | null;
    UserDefinedField: String | null;
}
export declare class MFExecutePaymentRequest {
    constructor(invoiceValue: number);
    InvoiceValue: number;
    PaymentMethodId: number | null;
    SessionId: String | null;
    CustomerName: String | null;
    DisplayCurrencyIso: String | null;
    MobileCountryCode: String | null;
    CustomerMobile: String | null;
    CustomerEmail: String | null;
    Language: MFLanguage | null;
    CustomerReference: String | null;
    CustomerCivilId: String | null;
    UserDefinedField: String | null;
    CustomerAddress: MFCustomerAddress | null;
    ExpiryDate: String | null;
    InvoiceItems: MFInvoiceItem[] | null;
    Suppliers: MFSupplier[] | null;
    RecurringModel: MFRecurringModel | null;
    ProcessingDetails: MFProcessingDetails | null;
    WebhookUrl: String | null;
}
export declare class MFExecutePaymentResponse {
    InvoiceId: number | null;
    IsDirectPayment: Boolean | null;
    PaymentURL: String | null;
    CustomerReference: String | null;
    UserDefinedField: String | null;
    RecurringId: String | null;
}
export declare class MFRecurringModel {
    constructor(mFRecurringType: MFRecurringType, iteration?: number | null);
    RecurringType: MFRecurringType | null;
    IntervalDays: number | null;
    Iteration: number | null;
}
export declare class MFProcessingDetails {
    constructor(autoCapture?: Boolean | null, bypass3DS?: Boolean | null);
    AutoCapture: Boolean | null;
    Bypass3DS: Boolean | null;
}
export declare class MFPaymentWithTokenRequest {
    constructor(executePaymentRequest: MFExecutePaymentRequest, token: String, securityCode?: String | null);
    ExecutePaymentRequest: MFExecutePaymentRequest;
    Token: String;
    SecurityCode: String | null;
}
export declare class MFGetPaymentStatusRequest {
    constructor(key: string, keyType: string);
    Key: String | null;
    KeyType: String | null;
}
export declare class MFGetPaymentStatusResponse {
    InvoiceId: number | null;
    InvoiceStatus: String | null;
    InvoiceReference: String | null;
    CustomerReference: String | null;
    CreatedDate: String | null;
    ExpiryDate: String | null;
    InvoiceValue: Double | null;
    Comments: String | null;
    CustomerName: String | null;
    CustomerMobile: String | null;
    CustomerEmail: String | null;
    UserDefinedField: String | null;
    InvoiceDisplayValue: String | null;
    InvoiceItems: MFInvoiceItem[] | null;
    InvoiceTransactions: MFInvoiceTransaction[] | null;
    Suppliers: MFSupplierItem[] | null;
    RecurringId: String | null;
}
export declare class MFInvoiceTransaction {
    TransactionDate: String | null;
    PaymentGateway: String | null;
    ReferenceId: String | null;
    TrackId: String | null;
    TransactionId: String | null;
    PaymentId: String | null;
    AuthorizationId: String | null;
    TransactionStatus: String | null;
    TransationValue: String | null;
    CustomerServiceCharge: String | null;
    DueValue: String | null;
    PaidCurrency: String | null;
    PaidCurrencyValue: String | null;
    Currency: String | null;
    Error: String | null;
    CardNumber: String | null;
    ErrorCode: String | null;
}
export declare class MFSupplierItem {
    SupplierCode: number | null;
    SupplierName: String | null;
    InvoiceShare: Double | null;
    ProposedShare: Double | null;
    DepositShare: Double | null;
}
export declare class MFInitiateSessionRequest {
    constructor(customerIdentifier: string);
    CustomerIdentifier: string;
    SaveToken: Boolean | null;
    IsRecurring: Boolean;
}
export declare class MFInitiateSessionResponse {
    SessionId: String | null;
    CountryCode: String | null;
    CustomerTokens: CustomerTokens[];
}
export declare class CustomerTokens {
    Token: String | null;
    CardNumber: String | null;
    CardBrand: String | null;
    Is3DSVerified: Boolean;
}
export declare class MFCallbackResponse {
    CardBrand: String | null;
}
export declare class MFDirectPaymentRequest {
    constructor(executePaymentRequest: MFExecutePaymentRequest, token: string | null, card: MFCardRequest | null);
    ExecutePaymentRequest: MFExecutePaymentRequest;
    Card: MFCardRequest | null;
    Token: string | null;
    SaveToken: boolean | null;
    Bypass3DS: boolean | null;
}
export declare class MFCardRequest {
    constructor(Number: string, ExpiryMonth: string, ExpiryYear: string, SecurityCode: string, CardHolderName: string);
    Number: string;
    ExpiryMonth: string;
    ExpiryYear: string;
    SecurityCode: string;
    CardHolderName: string;
}
export declare class MFDirectPaymentResponse {
    MfPaymentStatusResponse: MFGetPaymentStatusResponse;
    CardInfoResponse: DirectPaymentResponse;
}
export declare class DirectPaymentResponse {
    Status: String | null;
    ErrorMessage: String | null;
    PaymentId: String | null;
    Token: String | null;
    RecurringId: String | null;
    CardInfo: CardInfo | null;
    PaymentURL: String | null;
}
export declare class CardInfo {
    Number: String | null;
    ExpiryMonth: String | null;
    ExpiryYear: String | null;
    Brand: String | null;
    Issuer: String | null;
}
export declare class MFError {
    code: String | null;
    message: String | null;
}
export declare class MFSubmitCardViewResponse {
    CardBrand: String | null;
    SessionId: String | null;
}
export declare class MFCardViewStyle {
    constructor(hideCardIcons?: Boolean, direction?: String, cardHeight?: number, input?: MFCardViewInput, label?: MFCardViewLabel, error?: MFCardViewError);
    HideCardIcons: Boolean;
    Direction: String;
    CardHeight: number;
    Input: MFCardViewInput;
    Label: MFCardViewLabel;
    Error: MFCardViewError;
}
export declare class MFCardViewInput {
    constructor(color?: ProcessedColorValue | null | undefined, fontSize?: number, fontFamily?: MFFontFamily, inputHeight?: number, inputMargin?: number, borderColor?: ProcessedColorValue | null | undefined, borderWidth?: number, borderRadius?: number, boxShadow?: MFBoxShadow, placeHolder?: MFCardViewPlaceHolder);
    Color: ProcessedColorValue | null | undefined;
    FontSize: number;
    FontFamily: MFFontFamily;
    InputHeight: number;
    InputMargin: number;
    BorderColor: ProcessedColorValue | null | undefined;
    BorderWidth: number;
    BorderRadius: number;
    BoxShadow: MFBoxShadow;
    PlaceHolder: MFCardViewPlaceHolder;
}
export declare class MFCardViewPlaceHolder {
    constructor(holderName?: String, cardNumber?: String, expiryDate?: String, securityCode?: String);
    HolderName: String;
    CardNumber: String;
    ExpiryDate: String;
    SecurityCode: String;
}
export declare class MFCardViewLabel {
    constructor(display?: Boolean, color?: ProcessedColorValue | null | undefined, fontSize?: number, fontFamily?: MFFontFamily, fontWeight?: MFFontWeight, text?: MFCardViewText);
    Display: Boolean;
    Color: ProcessedColorValue | null | undefined;
    FontSize: number;
    FontFamily: MFFontFamily;
    FontWeight: MFFontWeight;
    Text: MFCardViewText;
}
export declare class MFCardViewText {
    constructor(holderName?: String, cardNumber?: String, expiryDate?: String, securityCode?: String);
    HolderName: String;
    CardNumber: String;
    ExpiryDate: String;
    SecurityCode: String;
}
export declare class MFCardViewError {
    constructor(borderColor?: ProcessedColorValue | null | undefined, borderRadius?: number, boxShadow?: MFBoxShadow);
    BorderColor: ProcessedColorValue | null | undefined;
    BorderRadius: number;
    BoxShadow: MFBoxShadow;
}
export declare class MFBoxShadow {
    constructor(hOffset?: number, vOffset?: number, blur?: number, spread?: number, color?: ProcessedColorValue | null | undefined);
    HOffset: number;
    VOffset: number;
    Blur: number;
    Spread: number;
    Color: ProcessedColorValue | null | undefined;
}
export declare class MFApplePayStyle {
    constructor(height: number | null | undefined, borderRadius: number | null | undefined, buttonText: String | null | undefined, hideLoadingIndicator: Boolean | undefined);
    Height: number | null | undefined;
    BorderRadius: number | null | undefined;
    ButtonText: String | null | undefined;
    HideLoadingIndicator: Boolean | null | undefined;
    VendorName: String | null | undefined;
}
export declare class MFApplePayRequest {
    constructor(merchantId: string, companyName: string, amount: number, currencyCode: string);
    MerchantId: string;
    CompanyName: string;
    Amount: number;
    CurrencyCode: string;
    CustomerIdentifier: string | null;
    SupportedCountries: [string] | null;
    SupportedNetworks: [string] | null;
}
export declare class MFApplePayToken {
    Token: string;
}
export declare class MFGooglePayRequest {
    constructor(totalPrice: String, merchantId: String, merchantName: String, countryCode: String, currencyIso: String);
    TotalPrice: String;
    MerchantId: String;
    MerchantName: String;
    CountryCode: String;
    CurrencyIso: String;
}
export declare class MFGooglePayButtonStyle {
}
//# sourceMappingURL=MFModels.d.ts.map