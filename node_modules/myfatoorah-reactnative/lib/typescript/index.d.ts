import React from 'react';
import { ProcessedColorValue } from 'react-native';
import { MFCountry, MFEnvironment, MFLanguage, MFCurrencyISO, MFMobileCountryCodeISO, MFNotificationOption, MFKeyType, MFFontWeight, MFFontFamily, MFRecurringType, MFTokenType } from './MFEnums';
import { MFSendPaymentRequest, MFSendPaymentResponse, MFInitiatePaymentRequest, MFInitiatePaymentResponse, MFGetPaymentStatusRequest, MFGetPaymentStatusResponse, MFExecutePaymentRequest, MFExecutePaymentResponse, MFDirectPaymentRequest, MFDirectPaymentResponse, MFInitiateSessionRequest, MFInitiateSessionResponse, MFCallbackResponse, MFCardViewStyle, MFApplePayStyle, MFPaymentMethod, MFCustomerAddress, MFInvoiceItem, MFSupplier, MFRecurringModel, MFProcessingDetails, MFPaymentWithTokenRequest, MFInvoiceTransaction, MFSupplierItem, MFCardRequest, DirectPaymentResponse, CardInfo, MFError, MFSubmitCardViewResponse, MFCardViewInput, MFCardViewPlaceHolder, MFCardViewLabel, MFCardViewText, MFCardViewError, MFBoxShadow, MFApplePayToken, MFApplePayRequest, MFGooglePayRequest } from './MFModels';
interface IMFSDK {
    init(apiKey: string, country: MFCountry, environment: MFEnvironment): void;
    setUpActionBar(toolBarTitle: String, toolBarTitleColor: ProcessedColorValue | null | undefined, toolBarBackgroundColor: ProcessedColorValue | null | undefined, isShowToolBar: Boolean): void;
    sendPayment(request: MFSendPaymentRequest, lang: String): Promise<MFSendPaymentResponse>;
    initiatePayment(request: MFInitiatePaymentRequest, lang: String): Promise<MFInitiatePaymentResponse>;
    getPaymentStatus(request: MFGetPaymentStatusRequest, lang: String): Promise<MFGetPaymentStatusResponse>;
    executePayment(request: MFExecutePaymentRequest, lang: String, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    executePaymentWithSavedToken(request: MFPaymentWithTokenRequest, lang: String, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    executeDirectPayment(directPaymentRequest: MFDirectPaymentRequest, lang: String, onInvoiceCreated: (invoiceId: string) => void): Promise<MFDirectPaymentResponse>;
    cancelRecurringPayment(recurringId: String, lang: String): Promise<Boolean>;
    cancelToken(tokenId: String, lang: String): Promise<Boolean>;
    initiateSession(initiateSessionRequest: MFInitiateSessionRequest): Promise<MFInitiateSessionResponse>;
}
declare class MyFatoorahReactNative implements IMFSDK {
    init(apiKey: string, country: MFCountry, environment: MFEnvironment): Promise<void>;
    setUpActionBar(toolBarTitle: String, toolBarTitleColor: ProcessedColorValue | null | undefined, toolBarBackgroundColor: ProcessedColorValue | null | undefined, isShowToolBar: Boolean): Promise<void>;
    initiatePayment(initiatePaymentRequest: MFInitiatePaymentRequest, lang: MFLanguage): Promise<MFInitiatePaymentResponse>;
    sendPayment(sendPaymentRequest: MFSendPaymentRequest, lang: MFLanguage): Promise<MFSendPaymentResponse>;
    getPaymentStatus(getPaymentStatusRequest: MFGetPaymentStatusRequest, lang: MFLanguage): Promise<MFGetPaymentStatusResponse>;
    executePayment(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    executePaymentWithSavedToken(executePaymentRequest: MFPaymentWithTokenRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    executeDirectPayment(directPaymentRequest: MFDirectPaymentRequest, lang: String, onInvoiceCreated: (invoiceId: string) => void): Promise<MFDirectPaymentResponse>;
    cancelToken(tokenId: String, lang: String): Promise<Boolean>;
    cancelRecurringPayment(recurringId: String, lang: String): Promise<Boolean>;
    initiateSession(initiateSessionRequest: MFInitiateSessionRequest): Promise<MFInitiateSessionResponse>;
    private AddOnInvoiceCreatedListener;
    getApplePayToken(request: MFApplePayRequest): Promise<MFApplePayToken>;
    applePayNativePayment(request: MFApplePayRequest, executePaymentRequest: MFExecutePaymentRequest, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
}
declare const MFSDK: MyFatoorahReactNative;
interface ICardViewProps {
    style: any;
    paymentStyle?: MFCardViewStyle;
}
interface IMFCardView {
    load(initiateSessionResponse: MFInitiateSessionResponse, onCardBinChanged: (bin: string) => void): Promise<String>;
    validate(currency?: string): Promise<string>;
    submit(currency?: string): Promise<MFSubmitCardViewResponse>;
    pay(request: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void, currency?: string): Promise<MFGetPaymentStatusResponse>;
}
declare class MFCardPaymentView extends React.Component<ICardViewProps> implements IMFCardView {
    constructor(props: any);
    validate(currency?: string): Promise<string>;
    submit(currency?: string): Promise<MFSubmitCardViewResponse>;
    load(initiateSessionResponse: MFInitiateSessionResponse, onCardBinChanged: (bin: string) => void): Promise<String>;
    private AddOnCardBinChangedListener;
    pay(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void, currency?: string): Promise<MFGetPaymentStatusResponse>;
    private AddOnInvoiceCreatedListener;
    render(): React.JSX.Element;
}
declare const GooglePayButtonConstants: any;
interface IGooglePayButtonProps {
    style?: any;
    type?: number;
    theme?: number;
    radius?: number;
}
interface IMFGooglePayButton {
    setupGooglePayHelper(sessionId: String, googlePayRequest: MFGooglePayRequest, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    setupGooglePayTokenHelper(googlePayRequest: MFGooglePayRequest): Promise<string>;
    setupWithAutoExecute(sessionId: string, googlePayRequest: MFGooglePayRequest, onInvoiceCreated?: (invoiceId: string) => void, onExecutePaymentSuccess?: (response: MFGetPaymentStatusResponse) => void, onError?: (error: MFError) => void): Promise<MFGetPaymentStatusResponse>;
    setupWithManualExecute(sessionId: string, googlePayRequest: MFGooglePayRequest, onSessionUpdated?: (updatedSessionId: string) => void, onError?: (error: MFError) => void): Promise<string>;
    executePayment(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
}
declare class MFGooglePayButton extends React.Component<IGooglePayButtonProps> implements IMFGooglePayButton {
    constructor(props: any);
    setupGooglePayHelper(sessionId: String, googlePayRequest: MFGooglePayRequest, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    setupGooglePayTokenHelper(googlePayRequest: MFGooglePayRequest): Promise<string>;
    setupWithAutoExecute(sessionId: String, googlePayRequest: MFGooglePayRequest, onInvoiceCreated?: (invoiceId: string) => void, onExecutePaymentSuccess?: (response: MFGetPaymentStatusResponse) => void, onError?: (error: MFError) => void): Promise<MFGetPaymentStatusResponse>;
    setupWithManualExecute(sessionId: String, googlePayRequest: MFGooglePayRequest, onSessionUpdated?: (updatedSessionId: string) => void, onError?: (error: MFError) => void): Promise<string>;
    executePayment(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    private registerListener;
    render(): React.JSX.Element;
}
interface IApplePayProps {
    style: any;
    applePayButtonStyle?: MFApplePayStyle;
}
interface IMFApplePayButton {
    applePayPayment(request: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    applePayDisplay(request: MFExecutePaymentRequest, lang: MFLanguage): Promise<string>;
    displayApplePayButton(session: MFInitiateSessionResponse, executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage): Promise<MFCallbackResponse>;
    applePayExecutePayment(request: MFExecutePaymentRequest | undefined): Promise<MFGetPaymentStatusResponse>;
}
declare class MFApplePayButtonView extends React.Component<IApplePayProps> implements IMFApplePayButton {
    constructor(props: any);
    applePayPayment(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    applePayDisplay(executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage): Promise<string>;
    displayApplePayButton(session: MFInitiateSessionResponse, executePaymentRequest: MFExecutePaymentRequest, lang: MFLanguage): Promise<MFCallbackResponse>;
    applePayExecutePayment(executePaymentRequest?: MFExecutePaymentRequest | undefined): Promise<MFGetPaymentStatusResponse>;
    private AddOnInvoiceCreatedListener;
    render(): React.JSX.Element;
}
interface IMFApplePay {
    loadApplePay(session: MFInitiateSessionResponse, request: MFExecutePaymentRequest, lang: MFLanguage, merchantName: String | undefined, onApplePayLoaded?: (loaded: Boolean) => void): Promise<Boolean>;
    openApplePaymentSheet(): Promise<MFCallbackResponse>;
    completeApplePayment(request: MFExecutePaymentRequest | undefined, onInvoiceCreated: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
}
declare class MFApplePayClass implements IMFApplePay {
    loadApplePay(session: MFInitiateSessionResponse, request: MFExecutePaymentRequest, lang: MFLanguage, merchantName?: String | undefined, onApplePayLoaded?: (loaded: Boolean) => void): Promise<Boolean>;
    openApplePaymentSheet(): Promise<MFCallbackResponse>;
    completeApplePayment(executePaymentRequest?: MFExecutePaymentRequest | undefined, onInvoiceCreated?: (invoiceId: string) => void): Promise<MFGetPaymentStatusResponse>;
    private AddOnInvoiceCreatedListener;
    private AddOnApplePayLoadedListener;
}
declare const MFApplePay: MFApplePayClass;
export { MFSDK, MFCardPaymentView, MFGooglePayButton, MFApplePayButtonView, MFApplePay, MFInitiatePaymentRequest, MFInitiatePaymentResponse, MFPaymentMethod, MFTokenType, MFSendPaymentRequest, MFCustomerAddress, MFInvoiceItem, MFSupplier, MFSendPaymentResponse, MFExecutePaymentRequest, MFExecutePaymentResponse, MFRecurringModel, MFProcessingDetails, MFPaymentWithTokenRequest, MFGetPaymentStatusRequest, MFGetPaymentStatusResponse, MFInvoiceTransaction, MFSupplierItem, MFInitiateSessionRequest, MFInitiateSessionResponse, MFDirectPaymentRequest, MFCardRequest, MFDirectPaymentResponse, DirectPaymentResponse, CardInfo, MFError, MFEnvironment, MFLanguage, MFCurrencyISO, MFCountry, MFMobileCountryCodeISO, MFNotificationOption, MFKeyType, MFFontWeight, MFFontFamily, MFRecurringType, MFSubmitCardViewResponse, MFCardViewStyle, MFCardViewInput, MFCardViewPlaceHolder, MFCardViewLabel, MFCardViewText, MFCardViewError, MFBoxShadow, MFApplePayStyle, MFApplePayToken, MFApplePayRequest, MFGooglePayRequest, GooglePayButtonConstants, };
//# sourceMappingURL=index.d.ts.map