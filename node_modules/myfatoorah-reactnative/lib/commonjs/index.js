"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CardInfo", {
  enumerable: true,
  get: function () {
    return _MFModels.CardInfo;
  }
});
Object.defineProperty(exports, "DirectPaymentResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.DirectPaymentResponse;
  }
});
exports.MFApplePayButtonView = exports.MFApplePay = exports.GooglePayButtonConstants = void 0;
Object.defineProperty(exports, "MFApplePayRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFApplePayRequest;
  }
});
Object.defineProperty(exports, "MFApplePayStyle", {
  enumerable: true,
  get: function () {
    return _MFModels.MFApplePayStyle;
  }
});
Object.defineProperty(exports, "MFApplePayToken", {
  enumerable: true,
  get: function () {
    return _MFModels.MFApplePayToken;
  }
});
Object.defineProperty(exports, "MFBoxShadow", {
  enumerable: true,
  get: function () {
    return _MFModels.MFBoxShadow;
  }
});
exports.MFCardPaymentView = void 0;
Object.defineProperty(exports, "MFCardRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardRequest;
  }
});
Object.defineProperty(exports, "MFCardViewError", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewError;
  }
});
Object.defineProperty(exports, "MFCardViewInput", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewInput;
  }
});
Object.defineProperty(exports, "MFCardViewLabel", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewLabel;
  }
});
Object.defineProperty(exports, "MFCardViewPlaceHolder", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewPlaceHolder;
  }
});
Object.defineProperty(exports, "MFCardViewStyle", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewStyle;
  }
});
Object.defineProperty(exports, "MFCardViewText", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCardViewText;
  }
});
Object.defineProperty(exports, "MFCountry", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFCountry;
  }
});
Object.defineProperty(exports, "MFCurrencyISO", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFCurrencyISO;
  }
});
Object.defineProperty(exports, "MFCustomerAddress", {
  enumerable: true,
  get: function () {
    return _MFModels.MFCustomerAddress;
  }
});
Object.defineProperty(exports, "MFDirectPaymentRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFDirectPaymentRequest;
  }
});
Object.defineProperty(exports, "MFDirectPaymentResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFDirectPaymentResponse;
  }
});
Object.defineProperty(exports, "MFEnvironment", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFEnvironment;
  }
});
Object.defineProperty(exports, "MFError", {
  enumerable: true,
  get: function () {
    return _MFModels.MFError;
  }
});
Object.defineProperty(exports, "MFExecutePaymentRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFExecutePaymentRequest;
  }
});
Object.defineProperty(exports, "MFExecutePaymentResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFExecutePaymentResponse;
  }
});
Object.defineProperty(exports, "MFFontFamily", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFFontFamily;
  }
});
Object.defineProperty(exports, "MFFontWeight", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFFontWeight;
  }
});
Object.defineProperty(exports, "MFGetPaymentStatusRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFGetPaymentStatusRequest;
  }
});
Object.defineProperty(exports, "MFGetPaymentStatusResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFGetPaymentStatusResponse;
  }
});
exports.MFGooglePayButton = void 0;
Object.defineProperty(exports, "MFGooglePayRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFGooglePayRequest;
  }
});
Object.defineProperty(exports, "MFInitiatePaymentRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInitiatePaymentRequest;
  }
});
Object.defineProperty(exports, "MFInitiatePaymentResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInitiatePaymentResponse;
  }
});
Object.defineProperty(exports, "MFInitiateSessionRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInitiateSessionRequest;
  }
});
Object.defineProperty(exports, "MFInitiateSessionResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInitiateSessionResponse;
  }
});
Object.defineProperty(exports, "MFInvoiceItem", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInvoiceItem;
  }
});
Object.defineProperty(exports, "MFInvoiceTransaction", {
  enumerable: true,
  get: function () {
    return _MFModels.MFInvoiceTransaction;
  }
});
Object.defineProperty(exports, "MFKeyType", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFKeyType;
  }
});
Object.defineProperty(exports, "MFLanguage", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFLanguage;
  }
});
Object.defineProperty(exports, "MFMobileCountryCodeISO", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFMobileCountryCodeISO;
  }
});
Object.defineProperty(exports, "MFNotificationOption", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFNotificationOption;
  }
});
Object.defineProperty(exports, "MFPaymentMethod", {
  enumerable: true,
  get: function () {
    return _MFModels.MFPaymentMethod;
  }
});
Object.defineProperty(exports, "MFPaymentWithTokenRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFPaymentWithTokenRequest;
  }
});
Object.defineProperty(exports, "MFProcessingDetails", {
  enumerable: true,
  get: function () {
    return _MFModels.MFProcessingDetails;
  }
});
Object.defineProperty(exports, "MFRecurringModel", {
  enumerable: true,
  get: function () {
    return _MFModels.MFRecurringModel;
  }
});
Object.defineProperty(exports, "MFRecurringType", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFRecurringType;
  }
});
exports.MFSDK = void 0;
Object.defineProperty(exports, "MFSendPaymentRequest", {
  enumerable: true,
  get: function () {
    return _MFModels.MFSendPaymentRequest;
  }
});
Object.defineProperty(exports, "MFSendPaymentResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFSendPaymentResponse;
  }
});
Object.defineProperty(exports, "MFSubmitCardViewResponse", {
  enumerable: true,
  get: function () {
    return _MFModels.MFSubmitCardViewResponse;
  }
});
Object.defineProperty(exports, "MFSupplier", {
  enumerable: true,
  get: function () {
    return _MFModels.MFSupplier;
  }
});
Object.defineProperty(exports, "MFSupplierItem", {
  enumerable: true,
  get: function () {
    return _MFModels.MFSupplierItem;
  }
});
Object.defineProperty(exports, "MFTokenType", {
  enumerable: true,
  get: function () {
    return _MFEnums.MFTokenType;
  }
});
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MFEnums = require("./MFEnums");
var _MFModels = require("./MFModels");
var _MFUtils = require("./MFUtils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
//#region SDK

const _proxy = new Proxy({}, {
  get() {
    throw new Error(_MFUtils.LINKING_ERROR);
  }
});
const MFModule = _reactNative.NativeModules.MFModule ? _reactNative.NativeModules.MFModule : _proxy;
const MFEventEmitter = new _reactNative.NativeEventEmitter(MFModule);
class MyFatoorahReactNative {
  async init(apiKey, country, environment) {
    await MFModule.init(apiKey, country, environment);
  }
  async setUpActionBar(toolBarTitle, toolBarTitleColor, toolBarBackgroundColor, isShowToolBar) {
    await MFModule.setUpActionBar(toolBarTitle, toolBarTitleColor, toolBarBackgroundColor, isShowToolBar);
  }
  async initiatePayment(initiatePaymentRequest, lang) {
    var jsonResponse = await MFModule.InitiatePayment(initiatePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async sendPayment(sendPaymentRequest, lang) {
    var jsonResponse = await MFModule.SendPayment(sendPaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async getPaymentStatus(getPaymentStatusRequest, lang) {
    var jsonResponse = await MFModule.GetPaymentStatus(getPaymentStatusRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async executePayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePayment(executePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async executePaymentWithSavedToken(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePaymentWithSavedToken(executePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async executeDirectPayment(directPaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ExecuteDirectPayment(directPaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async cancelToken(tokenId, lang) {
    var response = await MFModule.cancelToken(tokenId, lang);
    return response;
  }
  async cancelRecurringPayment(recurringId, lang) {
    var response = await MFModule.cancelRecurringPayment(recurringId, lang);
    return response;
  }
  async initiateSession(initiateSessionRequest) {
    var jsonResponse = await MFModule.InitiateSession(initiateSessionRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  async getApplePayToken(request) {
    var jsonResponse = await MFModule.getApplePayToken(request);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async applePayNativePayment(request, executePaymentRequest, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.applePayNativePayment(request, executePaymentRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
}
const MFSDK = exports.MFSDK = new MyFatoorahReactNative();
//#endregion

//#region CardView

const CardView = (0, _reactNative.requireNativeComponent)('MFCardView');
class MFCardPaymentView extends _react.default.Component {
  constructor(props) {
    super(props);
  }
  async validate(currency) {
    if (currency === undefined) currency = '';
    var response = await MFModule.Validate(currency);
    return response;
  }
  async submit(currency) {
    if (currency === undefined) currency = '';
    var response = await MFModule.Validate(currency);
    return response;
  }
  async load(initiateSessionResponse, onCardBinChanged) {
    setTimeout(() => {}, 100);
    this.AddOnCardBinChangedListener(onCardBinChanged);
    var jsonResponse = await MFModule.LoadCardView(initiateSessionResponse);
    return jsonResponse;
  }
  AddOnCardBinChangedListener(listener) {
    let onCardBinChangedEventName = 'onCardBinChanged';
    MFEventEmitter.removeAllListeners(onCardBinChangedEventName);
    MFEventEmitter.addListener(onCardBinChangedEventName, listener);
  }
  async pay(executePaymentRequest, lang, onInvoiceCreated, currency) {
    if (currency === undefined) currency = '';
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.Pay(executePaymentRequest, lang, currency);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(CardView, this.props);
  }
}

//#endregion

//#region GooglePay
exports.MFCardPaymentView = MFCardPaymentView;
const GooglePayButton = (0, _reactNative.requireNativeComponent)('MFGooglePayButton');
const {
  GooglePayButtonConstants
} = _reactNative.NativeModules;
exports.GooglePayButtonConstants = GooglePayButtonConstants;
const styles = _reactNative.StyleSheet.create({
  googlePay: {
    width: '90%',
    height: 70,
    margin: 10
  }
});
class MFGooglePayButton extends _react.default.Component {
  constructor(props) {
    super(props);
  }
  async setupGooglePayHelper(sessionId, googlePayRequest, onInvoiceCreated) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    var jsonResponse = await MFModule.SetupGooglePayHelper(sessionId, googlePayRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async setupGooglePayTokenHelper(googlePayRequest) {
    var jsonResponse = await MFModule.SetupGooglePayTokenHelper(googlePayRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async setupWithAutoExecute(sessionId, googlePayRequest, onInvoiceCreated, onExecutePaymentSuccess, onError) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    this.registerListener(MFConstants.GPayExecutePaymentSuccessEventName, onExecutePaymentSuccess);
    this.registerListener(MFConstants.GPayErrorEventName, onError);
    const jsonResponse = await MFModule.SetupGooglePayHelperAuto(sessionId, googlePayRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async setupWithManualExecute(sessionId, googlePayRequest, onSessionUpdated, onError) {
    this.registerListener(MFConstants.GPaySessionUpdatedEventName, onSessionUpdated);
    this.registerListener(MFConstants.GPayErrorEventName, onError);
    const jsonResponse = await MFModule.SetupGooglePayHelperManual(sessionId, googlePayRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async executePayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.registerListener(MFConstants.InvoiceCreatedEventName, onInvoiceCreated);
    var jsonResponse = await MFModule.ExecutePaymentWithGooglePay(executePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  registerListener(eventName, listener) {
    MFEventEmitter.removeAllListeners(eventName);
    if (listener !== undefined && listener instanceof Function) {
      MFEventEmitter.addListener(eventName, listener);
    }
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(GooglePayButton, _extends({}, this.props, {
      style: this.props.style ?? styles.googlePay
    }));
  }
}
//#endregion

//#region ApplePay
exports.MFGooglePayButton = MFGooglePayButton;
const ApplePay = (0, _reactNative.requireNativeComponent)('MFApplePay');
class MFApplePayButtonView extends _react.default.Component {
  constructor(props) {
    super(props);
    if (_reactNative.Platform.OS === 'android') {
      throw new Error(_MFUtils.PLATFORM_ERROR);
    }
  }
  async applePayPayment(executePaymentRequest, lang, onInvoiceCreated) {
    this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    var jsonResponse = await MFModule.ApplePayPayment(executePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async applePayDisplay(executePaymentRequest, lang) {
    console.warn('The applePayDisplay is deprecated and will be removed in the future. Please use the displayApplePayButton instead.');
    var response = await MFModule.ApplePayDisplay(executePaymentRequest, lang);
    return response;
  }
  async displayApplePayButton(session, executePaymentRequest, lang) {
    var response = await MFModule.DisplayApplePayButton(session, executePaymentRequest, lang);
    return (0, _MFUtils.modelParser)(response);
  }
  async applePayExecutePayment(executePaymentRequest) {
    var jsonResponse = await MFModule.ApplePayExecutePayment(executePaymentRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(ApplePay, this.props);
  }
}

//#endregion

//#region ApplePay V3
exports.MFApplePayButtonView = MFApplePayButtonView;
class MFApplePayClass {
  async loadApplePay(session, request, lang, merchantName = undefined, onApplePayLoaded) {
    if (onApplePayLoaded instanceof Function) {
      this.AddOnApplePayLoadedListener(onApplePayLoaded);
    }
    var jsonResponse = await MFModule.LoadApplePay(session, request, lang, merchantName);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async openApplePaymentSheet() {
    var jsonResponse = await MFModule.OpenApplePaymentSheet();
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  async completeApplePayment(executePaymentRequest = undefined, onInvoiceCreated) {
    if (onInvoiceCreated instanceof Function) {
      this.AddOnInvoiceCreatedListener(onInvoiceCreated);
    }
    var jsonResponse = await MFModule.CompleteApplePayment(executePaymentRequest);
    return (0, _MFUtils.modelParser)(jsonResponse);
  }
  AddOnInvoiceCreatedListener(listener) {
    let onInvoiceCreatedEventName = 'onInvoiceCreated';
    MFEventEmitter.removeAllListeners(onInvoiceCreatedEventName);
    MFEventEmitter.addListener(onInvoiceCreatedEventName, listener);
  }
  AddOnApplePayLoadedListener(listener) {
    let onApplePayLoadedListener = 'applePayLoaded';
    MFEventEmitter.removeAllListeners(onApplePayLoadedListener);
    MFEventEmitter.addListener(onApplePayLoadedListener, listener);
  }
}
const MFApplePay = exports.MFApplePay = new MFApplePayClass();
//#endregion

const MFConstants = {
  InvoiceCreatedEventName: 'onInvoiceCreated',
  CardBinChangedEventName: 'onCardBinChanged',
  GPaySessionUpdatedEventName: 'OnGPaySessionUpdated',
  GPayExecutePaymentSuccessEventName: 'OnGPayExecutePaymentSuccess',
  GPayErrorEventName: 'OnGPayError'
};
//# sourceMappingURL=index.js.map