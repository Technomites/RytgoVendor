"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MFSupplierItem = exports.MFSupplier = exports.MFSubmitCardViewResponse = exports.MFSendPaymentResponse = exports.MFSendPaymentRequest = exports.MFRecurringModel = exports.MFProcessingDetails = exports.MFPaymentWithTokenRequest = exports.MFPaymentMethod = exports.MFInvoiceTransaction = exports.MFInvoiceItem = exports.MFInitiateSessionResponse = exports.MFInitiateSessionRequest = exports.MFInitiatePaymentResponse = exports.MFInitiatePaymentRequest = exports.MFGooglePayRequest = exports.MFGooglePayButtonStyle = exports.MFGetPaymentStatusResponse = exports.MFGetPaymentStatusRequest = exports.MFExecutePaymentResponse = exports.MFExecutePaymentRequest = exports.MFError = exports.MFDirectPaymentResponse = exports.MFDirectPaymentRequest = exports.MFCustomerAddress = exports.MFCardViewText = exports.MFCardViewStyle = exports.MFCardViewPlaceHolder = exports.MFCardViewLabel = exports.MFCardViewInput = exports.MFCardViewError = exports.MFCardRequest = exports.MFCallbackResponse = exports.MFBoxShadow = exports.MFApplePayToken = exports.MFApplePayStyle = exports.MFApplePayRequest = exports.DirectPaymentResponse = exports.CustomerTokens = exports.CardInfo = void 0;
var _MFEnums = require("./MFEnums");
var _reactNative = require("react-native");
//#region InitiatePayment
class MFInitiatePaymentRequest {
  constructor(invoiceAmount, currencyIso) {
    this.InvoiceAmount = invoiceAmount;
    this.CurrencyIso = currencyIso;
  }
}
exports.MFInitiatePaymentRequest = MFInitiatePaymentRequest;
class MFInitiatePaymentResponse {
  PaymentMethods = null;
}
exports.MFInitiatePaymentResponse = MFInitiatePaymentResponse;
class MFPaymentMethod {
  PaymentMethodId = null;
  PaymentMethodAr = null;
  PaymentMethodEn = null;
  PaymentMethodCode = null;
  IsDirectPayment = null;
  ServiceCharge = null;
  TotalAmount = null;
  CurrencyIso = null;
  ImageUrl = null;
  IsEmbeddedSupported = null;
  PaymentCurrencyIso = null;
}
//#endregion

//#region SendPayment
exports.MFPaymentMethod = MFPaymentMethod;
class MFSendPaymentRequest {
  constructor(invoiceValue, notificationOption, customerName) {
    this.InvoiceValue = invoiceValue;
    this.CustomerName = customerName;
    this.NotificationOption = notificationOption;
  }
  MobileCountryCode = null;
  CustomerMobile = null;
  CustomerEmail = null;
  DisplayCurrencyIso = null;
  Language = _MFEnums.MFLanguage.ENGLISH;
  CustomerReference = null;
  CustomerCivilId = null;
  UserDefinedField = null;
  CustomerAddress = null;
  ExpiryDate = null;
  InvoiceItems = null;
  WebhookUrl = null;
}
exports.MFSendPaymentRequest = MFSendPaymentRequest;
class MFCustomerAddress {
  constructor(block, street, houseBuildingNo, address, addressInstructions) {
    this.Block = block;
    this.Street = street;
    this.HouseBuildingNo = houseBuildingNo;
    this.Address = address;
    this.AddressInstructions = addressInstructions;
  }
  Block = null;
  Street = null;
  HouseBuildingNo = null;
  Address = null;
  AddressInstructions = null;
}
exports.MFCustomerAddress = MFCustomerAddress;
class MFInvoiceItem {
  constructor(itemName, quantity, unitPrice) {
    this.ItemName = itemName;
    this.Quantity = quantity;
    this.UnitPrice = unitPrice;
  }
}
exports.MFInvoiceItem = MFInvoiceItem;
class MFSupplier {
  constructor(supplierCode, invoiceShare, proposedShare = null) {
    this.SupplierCode = supplierCode;
    this.ProposedShare = proposedShare;
    this.InvoiceShare = invoiceShare;
  }
  SupplierCode = null;
  ProposedShare = null;
  InvoiceShare = null;
}
exports.MFSupplier = MFSupplier;
class MFSendPaymentResponse {
  InvoiceId = null;
  InvoiceURL = null;
  CustomerReference = null;
  UserDefinedField = null;
}
//#endregion

//#region ExecutePayment
exports.MFSendPaymentResponse = MFSendPaymentResponse;
class MFExecutePaymentRequest {
  constructor(invoiceValue) {
    this.InvoiceValue = invoiceValue;
  }
  PaymentMethodId = null;
  SessionId = null;
  CustomerName = null;
  DisplayCurrencyIso = null;
  MobileCountryCode = null;
  CustomerMobile = null;
  CustomerEmail = null;
  Language = null;
  CustomerReference = null;
  CustomerCivilId = null;
  UserDefinedField = null;
  CustomerAddress = null;
  ExpiryDate = null;
  InvoiceItems = null;
  Suppliers = null;
  RecurringModel = null;
  ProcessingDetails = null;
  WebhookUrl = null;
}
exports.MFExecutePaymentRequest = MFExecutePaymentRequest;
class MFExecutePaymentResponse {
  InvoiceId = null;
  IsDirectPayment = null;
  PaymentURL = null;
  CustomerReference = null;
  UserDefinedField = null;
  RecurringId = null;
}
exports.MFExecutePaymentResponse = MFExecutePaymentResponse;
class MFRecurringModel {
  constructor(mFRecurringType, iteration = null) {
    this.Iteration = iteration;
    this.RecurringType = mFRecurringType;
  }
  RecurringType = null;
  IntervalDays = null;
  Iteration = null;
}
exports.MFRecurringModel = MFRecurringModel;
class MFProcessingDetails {
  constructor(autoCapture = null, bypass3DS = null) {
    this.AutoCapture = autoCapture;
    this.Bypass3DS = bypass3DS;
  }
  AutoCapture = null;
  Bypass3DS = null;
}
exports.MFProcessingDetails = MFProcessingDetails;
class MFPaymentWithTokenRequest {
  constructor(executePaymentRequest, token, securityCode = null) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.SecurityCode = securityCode;
  }
  SecurityCode = null;
}
//#endregion

//#region GetPaymentStatus
// MFKeyType
exports.MFPaymentWithTokenRequest = MFPaymentWithTokenRequest;
class MFGetPaymentStatusRequest {
  constructor(key, keyType) {
    this.Key = key;
    this.KeyType = keyType;
  }
  // constructor(invoiceId: String = '', paymentId: String = '') {
  //   if (invoiceId === '') {
  //     this.key = paymentId;
  //     this.keyType = MFKeyType.PAYMENTID;
  //   } else if (paymentId === '') {
  //     this.key = invoiceId;
  //     this.keyType = MFKeyType.INVOICEID;
  //   }
  // }
  Key = null;
  KeyType = null;
}
exports.MFGetPaymentStatusRequest = MFGetPaymentStatusRequest;
class MFGetPaymentStatusResponse {
  InvoiceId = null;
  InvoiceStatus = null;
  InvoiceReference = null;
  CustomerReference = null;
  CreatedDate = null;
  ExpiryDate = null;
  InvoiceValue = null;
  Comments = null;
  CustomerName = null;
  CustomerMobile = null;
  CustomerEmail = null;
  UserDefinedField = null;
  InvoiceDisplayValue = null;
  InvoiceItems = null;
  InvoiceTransactions = null;
  Suppliers = null;
  RecurringId = null;
}
exports.MFGetPaymentStatusResponse = MFGetPaymentStatusResponse;
class MFInvoiceTransaction {
  TransactionDate = null;
  PaymentGateway = null;
  ReferenceId = null;
  TrackId = null;
  TransactionId = null;
  PaymentId = null;
  AuthorizationId = null;
  TransactionStatus = null;
  TransationValue = null;
  CustomerServiceCharge = null;
  DueValue = null;
  PaidCurrency = null;
  PaidCurrencyValue = null;
  Currency = null;
  Error = null;
  CardNumber = null;
  ErrorCode = null;
}
exports.MFInvoiceTransaction = MFInvoiceTransaction;
class MFSupplierItem {
  SupplierCode = null;
  SupplierName = null;
  InvoiceShare = null;
  ProposedShare = null;
  DepositShare = null;
}
//#endregion

//#region InitiateSession
exports.MFSupplierItem = MFSupplierItem;
class MFInitiateSessionRequest {
  constructor(customerIdentifier) {
    this.CustomerIdentifier = customerIdentifier;
  }
}
exports.MFInitiateSessionRequest = MFInitiateSessionRequest;
class MFInitiateSessionResponse {
  SessionId = null;
  CountryCode = null;
  CustomerTokens = [];
}
exports.MFInitiateSessionResponse = MFInitiateSessionResponse;
class CustomerTokens {
  Token = null;
  CardNumber = null;
  CardBrand = null;
  Is3DSVerified = false;
}
exports.CustomerTokens = CustomerTokens;
class MFCallbackResponse {
  CardBrand = null;
}
//#endregion

//#region DirectPayment
exports.MFCallbackResponse = MFCallbackResponse;
class MFDirectPaymentRequest {
  constructor(executePaymentRequest, token, card) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.Card = card;
  }
  Card = null;
  Token = null;
  SaveToken = null;
  Bypass3DS = null;
}
exports.MFDirectPaymentRequest = MFDirectPaymentRequest;
class MFCardRequest {
  constructor(Number, ExpiryMonth, ExpiryYear, SecurityCode, CardHolderName) {
    this.Number = Number;
    this.ExpiryMonth = ExpiryMonth;
    this.ExpiryYear = ExpiryYear;
    this.SecurityCode = SecurityCode;
    this.CardHolderName = CardHolderName;
  }
}
exports.MFCardRequest = MFCardRequest;
class MFDirectPaymentResponse {
  MfPaymentStatusResponse = new MFGetPaymentStatusResponse();
  CardInfoResponse = new DirectPaymentResponse();
}
exports.MFDirectPaymentResponse = MFDirectPaymentResponse;
class DirectPaymentResponse {
  Status = null;
  ErrorMessage = null;
  PaymentId = null;
  Token = null;
  RecurringId = null;
  CardInfo = null;
  PaymentURL = null;
}
exports.DirectPaymentResponse = DirectPaymentResponse;
class CardInfo {
  Number = null;
  ExpiryMonth = null;
  ExpiryYear = null;
  Brand = null;
  Issuer = null;
}
//#endregion

//#region Error
exports.CardInfo = CardInfo;
class MFError {
  code = null;
  message = null;
}
//#endregion

//#region PaymentCardViewConfig
exports.MFError = MFError;
class MFSubmitCardViewResponse {
  CardBrand = null;
  SessionId = null;
}
exports.MFSubmitCardViewResponse = MFSubmitCardViewResponse;
class MFCardViewStyle {
  constructor(hideCardIcons = false, direction = 'ltr', cardHeight = 230, input = new MFCardViewInput(), label = new MFCardViewLabel(), error = new MFCardViewError()) {
    this.HideCardIcons = hideCardIcons;
    this.Direction = direction;
    this.CardHeight = cardHeight;
    this.Input = input;
    this.Label = label;
    this.Error = error;
  }
}
exports.MFCardViewStyle = MFCardViewStyle;
class MFCardViewInput {
  constructor(color = (0, _reactNative.processColor)('black'), fontSize = 13, fontFamily = _MFEnums.MFFontFamily.SansSerif, inputHeight = 32, inputMargin = 0, borderColor = (0, _reactNative.processColor)('#c7c7c7'), borderWidth = 1, borderRadius = 8, boxShadow = new MFBoxShadow(0, 0, 0, 0, (0, _reactNative.processColor)('white')), placeHolder = new MFCardViewPlaceHolder()) {
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.InputHeight = inputHeight;
    this.InputMargin = inputMargin;
    this.BorderColor = borderColor;
    this.BorderWidth = borderWidth;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
    this.PlaceHolder = placeHolder;
  }
}
exports.MFCardViewInput = MFCardViewInput;
class MFCardViewPlaceHolder {
  constructor(holderName = 'Name On Card', cardNumber = 'Number', expiryDate = 'MM / YY', securityCode = 'CVV') {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
}
exports.MFCardViewPlaceHolder = MFCardViewPlaceHolder;
class MFCardViewLabel {
  constructor(display = false, color = (0, _reactNative.processColor)('black'), fontSize = 13, fontFamily = _MFEnums.MFFontFamily.SansSerif, fontWeight = _MFEnums.MFFontWeight.Normal, text = new MFCardViewText()) {
    this.Display = display;
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.FontWeight = fontWeight;
    this.Text = text;
  }
}
exports.MFCardViewLabel = MFCardViewLabel;
class MFCardViewText {
  constructor(holderName = 'Card Holder Name', cardNumber = 'Card Number', expiryDate = 'Expiry Date', securityCode = 'Security Code') {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
}
exports.MFCardViewText = MFCardViewText;
class MFCardViewError {
  constructor(borderColor = (0, _reactNative.processColor)('red'), borderRadius = 8, boxShadow = new MFBoxShadow()) {
    this.BorderColor = borderColor;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
  }
}
exports.MFCardViewError = MFCardViewError;
class MFBoxShadow {
  constructor(hOffset = 0, vOffset = 0, blur = 0, spread = 0, color = (0, _reactNative.processColor)('white')) {
    this.HOffset = hOffset;
    this.VOffset = vOffset;
    this.Blur = blur;
    this.Spread = spread;
    this.Color = color;
  }
}
exports.MFBoxShadow = MFBoxShadow;
class MFApplePayStyle {
  constructor(height, borderRadius, buttonText, hideLoadingIndicator) {
    this.Height = height;
    this.BorderRadius = borderRadius;
    this.ButtonText = buttonText;
    this.HideLoadingIndicator = hideLoadingIndicator;
  }
}
//#endregion

//#region Apple Pay Native
exports.MFApplePayStyle = MFApplePayStyle;
class MFApplePayRequest {
  constructor(merchantId, companyName, amount, currencyCode) {
    this.MerchantId = merchantId;
    this.CompanyName = companyName;
    this.Amount = amount;
    this.CurrencyCode = currencyCode;
  }
  CustomerIdentifier = null;
  SupportedCountries = null;
  SupportedNetworks = null;
}
exports.MFApplePayRequest = MFApplePayRequest;
class MFApplePayToken {}
//#endregion

//#region GooglePayButton
exports.MFApplePayToken = MFApplePayToken;
class MFGooglePayRequest {
  constructor(totalPrice, merchantId, merchantName, countryCode, currencyIso) {
    this.TotalPrice = totalPrice;
    this.MerchantId = merchantId;
    this.MerchantName = merchantName;
    this.CountryCode = countryCode;
    this.CurrencyIso = currencyIso;
  }
}
exports.MFGooglePayRequest = MFGooglePayRequest;
class MFGooglePayButtonStyle {}
//#endregion
exports.MFGooglePayButtonStyle = MFGooglePayButtonStyle;
//# sourceMappingURL=MFModels.js.map