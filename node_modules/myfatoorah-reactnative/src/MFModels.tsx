import type { Double } from 'react-native/Libraries/Types/CodegenTypes';
import { MFCurrencyISO, MFFontFamily, MFFontWeight, MFLanguage, MFRecurringType } from './MFEnums';
import { ProcessedColorValue, processColor } from 'react-native';

//#region InitiatePayment
export class MFInitiatePaymentRequest {
  constructor(invoiceAmount: Double, currencyIso: MFCurrencyISO) {
    this.InvoiceAmount = invoiceAmount;
    this.CurrencyIso = currencyIso;
  }
  InvoiceAmount: Double;
  CurrencyIso: MFCurrencyISO;
}
export class MFInitiatePaymentResponse {
  PaymentMethods: MFPaymentMethod[] | null = null;
}
export class MFPaymentMethod {
  PaymentMethodId: number | null = null;
  PaymentMethodAr: String | null = null;
  PaymentMethodEn: String | null = null;
  PaymentMethodCode: String | null = null;
  IsDirectPayment: Boolean | null = null;
  ServiceCharge: Double | null = null;
  TotalAmount: Double | null = null;
  CurrencyIso: String | null = null;
  ImageUrl: string | null = null;
  IsEmbeddedSupported: Boolean | null = null;
  PaymentCurrencyIso: String | null = null;
}
//#endregion

//#region SendPayment
export class MFSendPaymentRequest {
  constructor(invoiceValue: number, notificationOption: string, customerName: string) {
    this.InvoiceValue = invoiceValue;
    this.CustomerName = customerName;
    this.NotificationOption = notificationOption;
  }
  InvoiceValue: number;
  NotificationOption: string;
  CustomerName: string;

  MobileCountryCode: String | null = null;
  CustomerMobile: String | null = null;
  CustomerEmail: String | null = null;
  DisplayCurrencyIso: String | null = null;
  Language: MFLanguage = MFLanguage.ENGLISH;
  CustomerReference: String | null = null;
  CustomerCivilId: String | null = null;
  UserDefinedField: String | null = null;
  CustomerAddress: MFCustomerAddress | null = null;
  ExpiryDate: String | null = null;
  InvoiceItems: MFInvoiceItem[] | null = null;
  WebhookUrl: String | null = null;
}
export class MFCustomerAddress {
  constructor(block: String | null, street: String | null, houseBuildingNo: String | null, address: String | null, addressInstructions: String | null) {
    this.Block = block;
    this.Street = street;
    this.HouseBuildingNo = houseBuildingNo;
    this.Address = address;
    this.AddressInstructions = addressInstructions;
  }
  Block: String | null = null;
  Street: String | null = null;
  HouseBuildingNo: String | null = null;
  Address: String | null = null;
  AddressInstructions: String | null = null;
}
export class MFInvoiceItem {
  constructor(itemName: String, quantity: number, unitPrice: Double) {
    this.ItemName = itemName;
    this.Quantity = quantity;
    this.UnitPrice = unitPrice;
  }
  ItemName: String;
  Quantity: number;
  UnitPrice: Double;
}
export class MFSupplier {
  constructor(supplierCode: number | null, invoiceShare: Double | null, proposedShare: Double | null = null) {
    this.SupplierCode = supplierCode;
    this.ProposedShare = proposedShare;
    this.InvoiceShare = invoiceShare;
  }
  SupplierCode: number | null = null;
  ProposedShare: Double | null = null;
  InvoiceShare: Double | null = null;
}
export class MFSendPaymentResponse {
  InvoiceId: number | null = null;
  InvoiceURL: String | null = null;
  CustomerReference: String | null = null;
  UserDefinedField: String | null = null;
}
//#endregion

//#region ExecutePayment
export class MFExecutePaymentRequest {
  constructor(invoiceValue: number) {
    this.InvoiceValue = invoiceValue;
  }

  InvoiceValue: number;
  PaymentMethodId: number | null = null;
  SessionId: String | null = null;

  CustomerName: String | null = null;
  DisplayCurrencyIso: String | null = null;
  MobileCountryCode: String | null = null;
  CustomerMobile: String | null = null;
  CustomerEmail: String | null = null;
  Language: MFLanguage | null = null;
  CustomerReference: String | null = null;
  CustomerCivilId: String | null = null;
  UserDefinedField: String | null = null;
  CustomerAddress: MFCustomerAddress | null = null;
  ExpiryDate: String | null = null;
  InvoiceItems: MFInvoiceItem[] | null = null;
  Suppliers: MFSupplier[] | null = null;
  RecurringModel: MFRecurringModel | null = null;
  ProcessingDetails: MFProcessingDetails | null = null;
  WebhookUrl: String | null = null;
}
export class MFExecutePaymentResponse {
  InvoiceId: number | null = null;
  IsDirectPayment: Boolean | null = null;
  PaymentURL: String | null = null;
  CustomerReference: String | null = null;
  UserDefinedField: String | null = null;
  RecurringId: String | null = null;
}
export class MFRecurringModel {
  constructor(mFRecurringType: MFRecurringType, iteration: number | null = null) {
    this.Iteration = iteration;
    this.RecurringType = mFRecurringType;
  }
  RecurringType: MFRecurringType | null = null;
  IntervalDays: number | null = null;
  Iteration: number | null = null;
}

export class MFProcessingDetails {
  constructor(autoCapture: Boolean | null = null, bypass3DS: Boolean | null = null) {
    this.AutoCapture = autoCapture;
    this.Bypass3DS = bypass3DS;
  }
  AutoCapture: Boolean | null = null;
  Bypass3DS: Boolean | null = null;
}

export class MFPaymentWithTokenRequest {
  constructor(executePaymentRequest: MFExecutePaymentRequest, token: String, securityCode: String | null = null) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.SecurityCode = securityCode;
  }
  ExecutePaymentRequest: MFExecutePaymentRequest;
  Token: String;
  SecurityCode: String | null = null;
}
//#endregion

//#region GetPaymentStatus
// MFKeyType
export class MFGetPaymentStatusRequest {
  constructor(key: string, keyType: string) {
    this.Key = key;
    this.KeyType = keyType;
  }
  // constructor(invoiceId: String = '', paymentId: String = '') {
  //   if (invoiceId === '') {
  //     this.key = paymentId;
  //     this.keyType = MFKeyType.PAYMENTID;
  //   } else if (paymentId === '') {
  //     this.key = invoiceId;
  //     this.keyType = MFKeyType.INVOICEID;
  //   }
  // }
  Key: String | null = null;
  KeyType: String | null = null;
}
export class MFGetPaymentStatusResponse {
  InvoiceId: number | null = null;
  InvoiceStatus: String | null = null;
  InvoiceReference: String | null = null;
  CustomerReference: String | null = null;
  CreatedDate: String | null = null;
  ExpiryDate: String | null = null;
  InvoiceValue: Double | null = null;
  Comments: String | null = null;
  CustomerName: String | null = null;
  CustomerMobile: String | null = null;
  CustomerEmail: String | null = null;
  UserDefinedField: String | null = null;
  InvoiceDisplayValue: String | null = null;
  InvoiceItems: MFInvoiceItem[] | null = null;
  InvoiceTransactions: MFInvoiceTransaction[] | null = null;
  Suppliers: MFSupplierItem[] | null = null;
  RecurringId: String | null = null;
}
export class MFInvoiceTransaction {
  TransactionDate: String | null = null;
  PaymentGateway: String | null = null;
  ReferenceId: String | null = null;
  TrackId: String | null = null;
  TransactionId: String | null = null;
  PaymentId: String | null = null;
  AuthorizationId: String | null = null;
  TransactionStatus: String | null = null;
  TransationValue: String | null = null;
  CustomerServiceCharge: String | null = null;
  DueValue: String | null = null;
  PaidCurrency: String | null = null;
  PaidCurrencyValue: String | null = null;
  Currency: String | null = null;
  Error: String | null = null;
  CardNumber: String | null = null;
  ErrorCode: String | null = null;
}
export class MFSupplierItem {
  SupplierCode: number | null = null;
  SupplierName: String | null = null;
  InvoiceShare: Double | null = null;
  ProposedShare: Double | null = null;
  DepositShare: Double | null = null;
}
//#endregion

//#region InitiateSession
export class MFInitiateSessionRequest {
  constructor(customerIdentifier: string) {
    this.CustomerIdentifier = customerIdentifier;
  }
  CustomerIdentifier: string;
  SaveToken: Boolean | null;
  IsRecurring: Boolean;
}
export class MFInitiateSessionResponse {
  SessionId: String | null = null;
  CountryCode: String | null = null;
  CustomerTokens: CustomerTokens[] = [];
}

export class CustomerTokens {
  Token: String | null = null;
  CardNumber: String | null = null;
  CardBrand: String | null = null;
  Is3DSVerified: Boolean = false;
}

export class MFCallbackResponse {
  CardBrand: String | null = null;
}
//#endregion

//#region DirectPayment
export class MFDirectPaymentRequest {
  constructor(executePaymentRequest: MFExecutePaymentRequest, token: string | null, card: MFCardRequest | null) {
    this.ExecutePaymentRequest = executePaymentRequest;
    this.Token = token;
    this.Card = card;
  }
  ExecutePaymentRequest: MFExecutePaymentRequest;

  Card: MFCardRequest | null = null;
  Token: string | null = null;

  SaveToken: boolean | null = null;
  Bypass3DS: boolean | null = null;
}
export class MFCardRequest {
  constructor(Number: string, ExpiryMonth: string, ExpiryYear: string, SecurityCode: string, CardHolderName: string) {
    this.Number = Number;
    this.ExpiryMonth = ExpiryMonth;
    this.ExpiryYear = ExpiryYear;
    this.SecurityCode = SecurityCode;
    this.CardHolderName = CardHolderName;
  }
  Number: string;
  ExpiryMonth: string;
  ExpiryYear: string;
  SecurityCode: string;
  CardHolderName: string;
}
export class MFDirectPaymentResponse {
  MfPaymentStatusResponse: MFGetPaymentStatusResponse = new MFGetPaymentStatusResponse();
  CardInfoResponse: DirectPaymentResponse = new DirectPaymentResponse();
}
export class DirectPaymentResponse {
  Status: String | null = null;
  ErrorMessage: String | null = null;
  PaymentId: String | null = null;
  Token: String | null = null;
  RecurringId: String | null = null;
  CardInfo: CardInfo | null = null;
  PaymentURL: String | null = null;
}
export class CardInfo {
  Number: String | null = null;
  ExpiryMonth: String | null = null;
  ExpiryYear: String | null = null;
  Brand: String | null = null;
  Issuer: String | null = null;
}
//#endregion

//#region Error
export class MFError {
  code: String | null = null;
  message: String | null = null;
}
//#endregion

//#region PaymentCardViewConfig

export class MFSubmitCardViewResponse {
  CardBrand: String | null = null;
  SessionId: String | null = null;
}

export class MFCardViewStyle {
  constructor(
    hideCardIcons: Boolean = false,
    direction: String = 'ltr',
    cardHeight: number = 230,
    input: MFCardViewInput = new MFCardViewInput(),
    label: MFCardViewLabel = new MFCardViewLabel(),
    error: MFCardViewError = new MFCardViewError()
  ) {
    this.HideCardIcons = hideCardIcons;
    this.Direction = direction;
    this.CardHeight = cardHeight;
    this.Input = input;
    this.Label = label;
    this.Error = error;
  }
  HideCardIcons: Boolean;
  Direction: String;
  CardHeight: number;
  Input: MFCardViewInput;
  Label: MFCardViewLabel;
  Error: MFCardViewError;
}

export class MFCardViewInput {
  constructor(
    color: ProcessedColorValue | null | undefined = processColor('black'),
    fontSize: number = 13,
    fontFamily: MFFontFamily = MFFontFamily.SansSerif,
    inputHeight: number = 32,
    inputMargin: number = 0,
    borderColor: ProcessedColorValue | null | undefined = processColor('#c7c7c7'),
    borderWidth: number = 1,
    borderRadius: number = 8,
    boxShadow: MFBoxShadow = new MFBoxShadow(0, 0, 0, 0, processColor('white')),
    placeHolder: MFCardViewPlaceHolder = new MFCardViewPlaceHolder()
  ) {
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.InputHeight = inputHeight;
    this.InputMargin = inputMargin;
    this.BorderColor = borderColor;
    this.BorderWidth = borderWidth;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
    this.PlaceHolder = placeHolder;
  }
  Color: ProcessedColorValue | null | undefined;
  FontSize: number;
  FontFamily: MFFontFamily;
  InputHeight: number;
  InputMargin: number;
  BorderColor: ProcessedColorValue | null | undefined;
  BorderWidth: number;
  BorderRadius: number;
  BoxShadow: MFBoxShadow;
  PlaceHolder: MFCardViewPlaceHolder;
}
export class MFCardViewPlaceHolder {
  constructor(holderName: String = 'Name On Card', cardNumber: String = 'Number', expiryDate: String = 'MM / YY', securityCode: String = 'CVV') {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
  HolderName: String;
  CardNumber: String;
  ExpiryDate: String;
  SecurityCode: String;
}

export class MFCardViewLabel {
  constructor(
    display: Boolean = false,
    color: ProcessedColorValue | null | undefined = processColor('black'),
    fontSize: number = 13,
    fontFamily: MFFontFamily = MFFontFamily.SansSerif,
    fontWeight: MFFontWeight = MFFontWeight.Normal,
    text: MFCardViewText = new MFCardViewText()
  ) {
    this.Display = display;
    this.Color = color;
    this.FontSize = fontSize;
    this.FontFamily = fontFamily;
    this.FontWeight = fontWeight;
    this.Text = text;
  }
  Display: Boolean;
  Color: ProcessedColorValue | null | undefined;
  FontSize: number;
  FontFamily: MFFontFamily;
  FontWeight: MFFontWeight;
  Text: MFCardViewText;
}

export class MFCardViewText {
  constructor(
    holderName: String = 'Card Holder Name',
    cardNumber: String = 'Card Number',
    expiryDate: String = 'Expiry Date',
    securityCode: String = 'Security Code'
  ) {
    this.HolderName = holderName;
    this.CardNumber = cardNumber;
    this.ExpiryDate = expiryDate;
    this.SecurityCode = securityCode;
  }
  HolderName: String;
  CardNumber: String;
  ExpiryDate: String;
  SecurityCode: String;
}

export class MFCardViewError {
  constructor(borderColor: ProcessedColorValue | null | undefined = processColor('red'), borderRadius: number = 8, boxShadow: MFBoxShadow = new MFBoxShadow()) {
    this.BorderColor = borderColor;
    this.BorderRadius = borderRadius;
    this.BoxShadow = boxShadow;
  }
  BorderColor;
  BorderRadius: number;
  BoxShadow: MFBoxShadow;
}

export class MFBoxShadow {
  constructor(
    hOffset: number = 0,
    vOffset: number = 0,
    blur: number = 0,
    spread: number = 0,
    color: ProcessedColorValue | null | undefined = processColor('white')
  ) {
    this.HOffset = hOffset;
    this.VOffset = vOffset;
    this.Blur = blur;
    this.Spread = spread;
    this.Color = color;
  }
  HOffset: number;
  VOffset: number;
  Blur: number;
  Spread: number;
  Color: ProcessedColorValue | null | undefined;
}

export class MFApplePayStyle {
  constructor(
    height: number | null | undefined,
    borderRadius: number | null | undefined,
    buttonText: String | null | undefined,
    hideLoadingIndicator: Boolean | undefined
  ) {
    this.Height = height;
    this.BorderRadius = borderRadius;
    this.ButtonText = buttonText;
    this.HideLoadingIndicator = hideLoadingIndicator;
  }
  Height: number | null | undefined;
  BorderRadius: number | null | undefined;
  ButtonText: String | null | undefined;
  HideLoadingIndicator: Boolean | null | undefined;
  VendorName: String | null | undefined;
}
//#endregion

//#region Apple Pay Native
export class MFApplePayRequest {
  constructor(merchantId: string, companyName: string, amount: number, currencyCode: string) {
    this.MerchantId = merchantId;
    this.CompanyName = companyName;
    this.Amount = amount;
    this.CurrencyCode = currencyCode;
  }
  MerchantId: string;
  CompanyName: string;
  Amount: number;
  CurrencyCode: string;
  CustomerIdentifier: string | null = null;
  SupportedCountries: [string] | null = null;
  SupportedNetworks: [string] | null = null;
}

export class MFApplePayToken {
  Token: string;
}
//#endregion

//#region GooglePayButton
export class MFGooglePayRequest {
  constructor(totalPrice: String, merchantId: String, merchantName: String, countryCode: String, currencyIso: String) {
    this.TotalPrice = totalPrice;
    this.MerchantId = merchantId;
    this.MerchantName = merchantName;
    this.CountryCode = countryCode;
    this.CurrencyIso = currencyIso;
  }
  TotalPrice: String;
  MerchantId: String;
  MerchantName: String;
  CountryCode: String;
  CurrencyIso: String;
}
export class MFGooglePayButtonStyle {}
//#endregion
